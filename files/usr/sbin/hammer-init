#!/bin/bash
function cmd_base()
{
	rm -rf /.bzr
	opkg update
	opkg install --force-overwrite hammer-app-base
	source /usr/lib/hammer/bash/base.functions
	echo "Installing skell to root"
	base.CopySkelToRoot
	echo "Please enter owner information" 
	base.promptOwnerInfo 
	echo "Please enter CA information" 
	base.promptCaInfo 
	source /usr/lib/hammer/bash/openssl.functions
	openssl.newKey CA
	openssl.newCA
	echo "Please pick a passphrase for your ssh key " 
	local pwVerify
		while true
		do
			read -e -p "Password: " pw
			if [ -z $pwVerify ]
			then
				pwVerify=$pw
				echo "Re enter to verify"
			elif [ "$pwVerify" = "$pw" ]
			then
				echo "passwords match"
				ANSWERS+=( $pw )
				break
			else
				echo "Passwords missmatch, try again"
				unset pwVerify
			fi
		
		done
	source /usr/lib/hammer/bash/ssh.functions
	ssh.newKey "$(uci get hammer.owner.hammer_id )" "${pw}"
	read -e -p "Press enter to continue after you secured your key" foo
	unset foo
	unset pw
	ssh.authorizeKey "$(uci get hammer.owner.hammer_id )" "$( uci get  hammer.owner.ssh_pub )"
	ssh.secureServer
}
function cmd_hd()
{
	source /usr/lib/hammer/bash/base.functions
	if [[ $( base.OwnerIsConfigured ) == "0" ]]
	then
		echo "run $0 base first"
		return 1
	fi
	read -e -p "This will erase all contents of /dev/sda. type Yes, do it! to continue" doit
	if [ "${doit}" = "Yes, do it!"  ]
	then
		opkg update
		opkg install --force-overwrite hammer-app-hd
		source /usr/lib/hammer/bash/hd.functions
		hd.deletePartionTable
		hd.insertNew250GBMBR
		hd.formatOverlayPartion
		hd.formatHomePartion
		hd.formatBackupPartion
		hd.makeSwapPartion
		hd.createNewFstab
		hd.copyOverlay
		hd.copyHome
		read -e -p "Press enter key to reboot" 
		echo "1" > /usr/lib/hammer/data/hd.configured
		reboot
	else
		echo "You need to say 'Yes, do it!', not "${doit}" to proceed."
		echo "Aborting"
		return 1
	fi
}
function cmd_owncloud()
{
	if [[ $( base.OwnerIsConfigured ) == "0" ]]
	then
		echo "run $0 base first"
		return 1
	fi
	if [[ $( hd.isConfigured ) == "0" ]]
	then
		echo "run $0 hd first"
		return 1
	fi
	echo "Installing owncloud"
	opkg update
	opkg install --force-overwrite hammer-app-owncloud
	source /usr/lib/hammer/bash/base.functions
	source /usr/lib/hammer/bash/openssl.functions
	echo "Create cert for owncloud"
	base.promptCertInfo owncloud
	echo "creating new key"
	openssl.newKey owncloud
	echo "submitting signing request"
	openssl.newSigningRequest owncloud
	echo "signing owncloud"
	openssl.signRequest owncloud
	echo  "creating insecure key for webserver"
	openssl.makeInsecureKey owncloud
	mv $( uci get hammer.owner.home )/.secrets/owncloud.key.insecure /etc/nginx
	cp $( uci get hammer.owner.home )/signed/owncloud.crt /etc/nginx
	local cn=$( openssl x509 -noout -subject -in /etc/nginx/owncloud.crt  | cut -d'/' -f3 | cut -d'=' -f2 )
	local repl="'s/SNAME/"$cn"/'"
	cat /etc/nginx/sites-available/owncloud | sed -e "${repl}" > /tmp/foo && mv /tmp/foo /etc/nginx/sites-available/owncloud
	uci set php5-fastcgi.@php5-fastcgi[0].port=9000
	uci commit php5-fastcgi
	/etc/init.d/lucid stop
	/etc/init.d/uhttpd stop
	uci set lucid.http.address=1337
	uci set lucid.https.address=1443
	uci delete uhttpd.main.listen_https
	uci delete uhttpd.main.listen_http
	uci set uhttpd.main.listen_https=0.0.0.0:1443
	uci set uhttpd.main.listen_http=0.0.0.0:1337
	uci commit lucid
	uci commit uhttpd
	/etc/init.d/php5-fastcgi enable
	/etc/init.d/php5-fastcgi stop
	/etc/init.d/php5-fastcgi start
	/etc/init.d/lucid start
	/etc/init.d/nginx enable
	/etc/init.d/nginx stop
	/etc/init.d/nginx start
}
arg="cmd_$1"
t=$( type -t "$arg" )
if [[ "$t" == 'function' ]]
then
	cmd_$1
else
	echo "usage: $0 hd|base"
fi

